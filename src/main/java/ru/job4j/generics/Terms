1. Что такое "обобщенное программирование"?
1) Это подход к описанию данных и алгоритмов.
2) При таком подходе можно использовать различные типы данных, не меняя их описаний и алгоритмов работы с ними.

2. Что такое дженерики (Generics)?
1) Дженерики (обобщения) - это параметризованные типы данных.
2) Конкретный тип данных подставляется уже во время использования класса, как параметр.
3) На дженерик можно задавать ограничения: какой класс должен расширять подставляемый параметр или
какие интерфейсы реализовывать.
Иначе говоря: с помощью дженерика мы указываем: "тут будет переменная какого-то типа, неважно какого,
главное, чтобы имела такие-то свойства".

3. Когда в Java появились дженерики? Что это по сути?
1) Дженерики появились в Java 1.5.
2) По сути это просто "синтаксический сахар", позволяющий компилятору провести дополнительную проверку
типов для избежания ошибок.
3) После компиляции все объекты преобразуются в тип Object или верхний ограничивающий класс.

4. Какие бывают типы дженериков?
1) Просто дженерик: <T>. При компиляции преобразуется в тип Object.
2) Дженерик, расширяющий класс или интерфейс: <T extends String, U extends Comparable>.
При компиляции T преобразуется в тип String, U преобразуется в тип Comparable.
3) Параметр типа Wildcard - знак вопроса ("?"). Предназначен для определения не только одного класса,
но и его подклассов в качестве допустимых (? extends String).

5. Что такое стирание типов? Когда оно происходит? Зачем разработчики так сделали?
1) Стирание типов - удаление информации о заданных с помощью дженериков классах. Происходит на этапе компиляции.
----- Тип параметра <T> преобразуется в Object
----- Тип параметра <T extends Comparable> в Comparable
----- Запись вида List<String> преобразуется в List и т.д.
2) Стирание типов возникло потому, что при разработке Java важна обратная совместимость.
Виртуальная машина не умеет работать с генериками изначально, поэтому их нужно "убирать" после компиляции.

6. Можно ли создать объект типа дженерик таким образом: T = new T() ?
Нельзя, из-за стирания типов. Компилятор должен стереть дженерик и подставить конструктор - но какой? Отсюда ошибка при компиляции: "Type parameter cannot be instantiated directly"
---
Пример: возьмем метод и вызовем его дважды:
static <T> T get(T obj) {
return new T();
}
----- get(432);
----- get("12");
Какой конструктор использовать? В первом случае String(), во втором Integer(). Конфуз.

7. Как можно создать новый объект дженерик-класса в ходе работы программы?
С помощью ReflectAPI и метода newInstance().

8. Дан класс Sample<T>. Как можно узнать, какой дженерик-тип был передан туда в качестве параметра?
Можно ли так сделать, если все поля в Sample<T> - private?
1) При помощи Reflection API: анализируя класс generic-поля в объекта класса Class.
Объекты Class содержат информацию о классах, использующихся в приложении.
2) В случае, если поле private или просто недоступно по модификатору доступа, нужно "разрешить" к нему
доступа методом field.setAccessible(true);

9. Где хранится информация про Generics? Какой интерфейс реализует этот объект?
1) Во время Runtime информация о дженериках хранится в объектах класса Class.
2) Класс Class реализует интерфейс Type.
3) Интерфейс Type - это общий интерфейс для всех классов Java.

10. Работу с какими типами данных включает в себя интерфейс Type?
1) Raw type - тип дженерик-класса без заданного параметра.
2) Parametrized types - тип дженерик-класса с заданным параметром.
3) Arrays - массивы.
4) Type variables - просто переменная класса.
5) Primitive - примитивные типы данных.

11. Назовите основные интерфейсы, расширяющие интерфейс Type
1) GenericArrayType
2) ParameterizedType
3) TypeVariable<D extends GenericDeclaration>
4) WildcardType

12. Приведите пример типа, который представляет интерфейс ParameterizedType
1) Collection<String>
2) ArrayList<Integer>

13. Приведите пример типа, который представляет интерфейс WildcardType
1) ?
2) ? extends Number
3) ? super Integer

14. Для каких типов данных определен интерфейс TypeVariable?
Для типов данных, представляющих некий класс: String a, Integer b и т.д.

15. Как можно получить тип Generics?
При помощи рефлексии: Class cl = obj.getClass()