1. Метод hashCode() не имеет точно определенную реализацию, поэтому порядок его вычисления
определяется разработчиком, но к его реализации существуют требования:
hashcode для null это 0, для одного и того же не измененного объекта любой вызов hashcode
должен возвращать одно и то же число. Для одинаковых по equals объектов - одно и то же число.
Возвращаемое число - int.
Вычисляемые hashcode должны максимально отличаться друг от друга чтобы обеспечивать
максимальное распределение. В большинстве случаев порядок вычисления hashcode объекта
сводится к вычислению hashcode у каждого поля этого объекта, а потом на их основе вычислению
общего hashcode. Если поле int,то его hashcode - само это число. Если строка, то берестя
числовое представление первого символа в таблице ASCII умножается на 31, к полученному
результату прибавляется числовое значение второго символа, потом результат снова умножается
на 31 и так до конца строки. В заключении hashcode каждого поля объекта суммируется или перемножается,
или суммируется и перемножается, часто на число 31 и между собой и полученное число возвращается как
значение hashcode этого объекта.

2. Hash функция это функция преобразования hashcode объекта в индекс hashtable по которому
будет храниться этот объект. Работает следующим образом:
Вычисляется hashcode объекта, полученный hashcode хеш-функция может трансформировать разными
способами:
а) взять остаток от деления hashcode на длинну массива хранения. Полученный результал всегда
будет меньше этой длинны. Для этого используется опрератор %. Таким образом мы получаем индекс ячейки.
Т.е. результатом всегда будет число, которое является каким-нибудь индексом в нашем массиве
от 0 до length - 1.
б) вариант а с дополнением в том, что складываются числа, составляющие hashcode, а потом уже
от них берется остаток от деления.
в) полученное число подвергается побитовому сдвигу вправо на половину своей длинны, а затем
через XOR сравнивается исходное число и первоначальное, в результате получается новое число в
пределах длинны массива. Для этого испольхуется оператор >>> побитовый сдвиг вправо без учета
знака, который сдвигает биты числа вправо на один или нужное количество разрядов,
что приводит к тому, что начальное число уменьшается в два раза
при каждом сдвиге на один разряд. Таким образом можно очень быстро уменьшить нужное число.
Затем полученное число можно использовать чтобы перемешать биты первоначального числа с новым.
Это дает изменение нужного числа с целью лучшего распределения в данных массиве.
г) полученный hashcode побитово сравнивается с длинной массива через оператор & - логическое
"и" с присваиванием, что приводит к тому, что в двоичном разряде 1-ца устанавливается только в том
случае, если на месте этого разряда у обоих сравниваемых числел стоят 1-цы.
По сути эта операция обрезает старшие биты у большего числа и обнуляет те разряды,
где только одна единица в паре чисел, которые сравниваются. Возвращает число либо равное меньшему,
либо меньше меньшего из сравниваеых. Т.е. если сравнивается length - 1 и любое число,
то результат будет всегда в диапазоне от 0 до length - 1.